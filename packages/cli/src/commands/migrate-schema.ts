/**
 * migrate-schema command
 *
 * Generates schema migration template
 */

import { Command } from 'commander';
import chalk from 'chalk';
import { writeFileSync, mkdirSync, existsSync } from 'fs';
import { join } from 'path';

interface MigrateOptions {
  from?: string;
  to?: string;
}

export const migrateSchemaCommand = new Command('migrate-schema')
  .description('Generate Sanity schema migration template')
  .option('--from <version>', 'Source schema version (e.g., v1)')
  .option('--to <version>', 'Target schema version (e.g., v2)')
  .action((options: MigrateOptions) => {
    console.log(chalk.bold('\nüîÑ Generate Schema Migration Template\n'));

    const fromVersion = options.from || 'v1';
    const toVersion = options.to || 'v2';

    console.log(chalk.bold('Migration:'));
    console.log(chalk.gray(`  From: ${fromVersion}`));
    console.log(chalk.gray(`  To:   ${toVersion}`));
    console.log('');

    // Create migrations directory
    const migrationsDir = join(process.cwd(), 'sanity', 'migrations');
    if (!existsSync(migrationsDir)) {
      mkdirSync(migrationsDir, { recursive: true });
    }

    const migrationFile = join(migrationsDir, `${fromVersion}-to-${toVersion}.ts`);

    // Check if migration already exists
    if (existsSync(migrationFile)) {
      console.log(chalk.yellow(`‚ö†Ô∏è  Migration file already exists: ${migrationFile}\n`));
      console.log(chalk.gray('Delete it first or use a different version\n'));
      process.exit(1);
    }

    // Generate migration template
    const template = `/**
 * Schema Migration: ${fromVersion} ‚Üí ${toVersion}
 *
 * Generated by @podcast-framework/cli
 * Date: ${new Date().toISOString().split('T')[0]}
 *
 * IMPORTANT: This is a TEMPLATE. Review and modify before running!
 * - Fill in the TODOs below
 * - Test on development dataset first
 * - Backup production before running
 */

import { getCliClient } from 'sanity/cli';

const client = getCliClient();

async function migrateEpisodes() {
  console.log('Starting episode migration...');

  // TODO: Update this query for your migration
  const query = '*[_type == "episode"]';
  const episodes = await client.fetch(query);

  console.log(\`Found \${episodes.length} episodes to migrate\`);

  for (const episode of episodes) {
    // TODO: Implement your migration logic here
    // Example: Rename field
    // await client
    //   .patch(episode._id)
    //   .set({
    //     newFieldName: episode.oldFieldName
    //   })
    //   .unset(['oldFieldName'])
    //   .commit();

    console.log(\`‚úì Migrated: \${episode.title}\`);
  }

  console.log('\\nEpisode migration complete!');
}

// TODO: Add more migration functions as needed
// async function migrateGuests() { ... }
// async function migrateTheme() { ... }

async function runMigration() {
  try {
    await migrateEpisodes();
    // await migrateGuests();

    console.log('\\n‚úÖ Migration complete!');
  } catch (error) {
    console.error('\\n‚ùå Migration failed:', error);
    process.exit(1);
  }
}

runMigration();
`;

    try {
      writeFileSync(migrationFile, template);

      console.log(chalk.green(`‚úÖ Migration template created:\n`));
      console.log(chalk.cyan(`   ${migrationFile}\n`));

      console.log(chalk.bold('Next steps:'));
      console.log(chalk.gray('  1. Review and edit the migration file'));
      console.log(chalk.gray('  2. Fill in the TODO sections'));
      console.log(chalk.gray('  3. Test on development dataset:'));
      console.log(chalk.yellow(`     npx sanity exec ${migrationFile} --dataset development`));
      console.log(chalk.gray('  4. If successful, run on production:'));
      console.log(chalk.yellow(`     npx sanity exec ${migrationFile} --dataset production`));
      console.log('');
      console.log(chalk.bold.yellow('‚ö†Ô∏è  IMPORTANT:'));
      console.log(chalk.yellow('  - Always test on development dataset first'));
      console.log(chalk.yellow('  - Backup production before running migration'));
      console.log(chalk.yellow('  - Review generated code carefully'));
      console.log('');

    } catch (error) {
      console.log(chalk.red('‚ùå Failed to create migration template\n'));
      console.error(error);
      process.exit(1);
    }
  });
